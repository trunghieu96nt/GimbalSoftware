#include "mainwindow.h"
#include "ui_mainwindow.h"

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);

    /* Connect Signals and Slots */
    connect(ui->draggableTitleBar, SIGNAL(mousePressing(QMouseEvent*)),
            this, SLOT(on_draggableTitleBar_custom_mousePressing(QMouseEvent*)));
    connect(ui->draggableTitleBar, SIGNAL(mouseMoving(QMouseEvent*)),
            this, SLOT(on_draggableTitleBar_custom_mouseMoving(QMouseEvent*)));

    connect(ui->btnClose, SIGNAL(clicked()), this, SLOT(close()));
    connect(ui->btnMinimize, SIGNAL(clicked()), this, SLOT(on_btnMinimize_custom_clicked()));
    connect(ui->btnConnect, SIGNAL(clicked()), this, SLOT(on_btnConnect_custom_clicked()));
    connect(ui->btnHome, SIGNAL(clicked()), this, SLOT(on_btnHome_custom_clicked()));
    connect(ui->btnStop, SIGNAL(clicked()), this, SLOT(on_btnStop_custom_clicked()));
    connect(ui->btnManual, SIGNAL(clicked()), this, SLOT(on_btnManual_custom_clicked()));
    connect(ui->btnTracking, SIGNAL(clicked()), this, SLOT(on_btnTracking_custom_clicked()));
    connect(ui->btnPointing, SIGNAL(clicked()), this, SLOT(on_btnPointing_custom_clicked()));
    connect(ui->btnSetKp, SIGNAL(clicked()), this, SLOT(on_btnSetKp_custom_clicked()));
    connect(ui->btnSetKi, SIGNAL(clicked()), this, SLOT(on_btnSetKi_custom_clicked()));
    connect(ui->btnSetKd, SIGNAL(clicked()), this, SLOT(on_btnSetKd_custom_clicked()));
    connect(ui->btnSetKff1, SIGNAL(clicked()), this, SLOT(on_btnSetKff1_custom_clicked()));
    connect(ui->btnSetKff2, SIGNAL(clicked()), this, SLOT(on_btnSetKff2_custom_clicked()));

    /* QComboBox Initialization */
    ui->cboModeAxis->setCurrentText("Both");

    /* QLineEdit Validator */
    QDoubleValidator *paramsValidator = new QDoubleValidator(this);
    paramsValidator->setNotation(QDoubleValidator::StandardNotation);
    paramsValidator->setDecimals(6);
    ui->ledKp->setValidator(paramsValidator);
    ui->ledKi->setValidator(paramsValidator);
    ui->ledKd->setValidator(paramsValidator);
    ui->ledKff1->setValidator(paramsValidator);
    ui->ledKff2->setValidator(paramsValidator);

    /* Serial Port */
    serialCOMPort->setBaudRate(QSerialPort::Baud115200);
    serialCOMPort->setDataBits(QSerialPort::Data8);
    serialCOMPort->setParity(QSerialPort::NoParity);
    serialCOMPort->setStopBits(QSerialPort::OneStop);
    serialCOMPort->setFlowControl(QSerialPort::NoFlowControl);

    /* The first seacrh COM Port */
    foreach (const QSerialPortInfo &info, QSerialPortInfo::availablePorts())
    {
//        qDebug() << "Name : " << info.portName();
//        qDebug() << "Description : " << info.description();
//        qDebug() << "Manufacturer: " << info.manufacturer();
        ui->cboCom->addItem(info.portName());
    }

    /* Timer 1s to search exist COM Port */
    timerCOMPort = new QTimer(this);
    connect(timerCOMPort, SIGNAL(timeout()), this, SLOT(on_timerCOMPort_timeout()));
    timerCOMPort->start(1000);
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::on_draggableTitleBar_custom_mousePressing(QMouseEvent *event)
{
    if (event->button() == Qt::LeftButton) {
        dragPosition = event->globalPos() - frameGeometry().topLeft();
        event->accept();
    }
}

void MainWindow::on_draggableTitleBar_custom_mouseMoving(QMouseEvent *event)
{
    if (event->buttons() & Qt::LeftButton) {
        move(event->globalPos() - dragPosition);
        event->accept();
    }
}

void MainWindow::on_btnMinimize_custom_clicked()
{
    this->setWindowState(Qt::WindowMinimized);
}

void MainWindow::on_btnConnect_custom_clicked()
{
    if (ui->btnConnect->text() == "Connect")
    {
        serialCOMPort->setPortName(ui->cboCom->currentText());

        if (serialCOMPort->open(QSerialPort::ReadWrite) == true)
        {
            ui->btnConnect->setText("Disconnect");
            ui->btnConnect->setStyleSheet("QPushButton {\
                                           font: bold 18px; color: white;\
                                           border: 2px solid #ff0000;\
                                           background-color: #ff0000;\
                                           }\
                                           QPushButton:pressed { background-color: #e60000; }\
                                           QPushButton:hover { border: 2px solid #8f8f8f; }");
            ui->pteStatus->appendPlainText("- " + serialCOMPort->portName() + " is connected.");
        }
    }
    else
    {
        ui->btnConnect->setText("Connect");
        ui->btnConnect->setStyleSheet("QPushButton {\
                                       font: bold 18px; color: white;\
                                       border: 2px solid #33cc33;\
                                       background-color: #33cc33;\
                                       }\
                                       QPushButton:pressed { background-color: #2eb82e; }\
                                       QPushButton:hover { border: 2px solid #8f8f8f; }");
        serialCOMPort->close();
        ui->pteStatus->appendPlainText("- " + serialCOMPort->portName() + " is disconnected.");
    }
}

void MainWindow::on_btnHome_custom_clicked()
{
    QByteArray dataArray;
    dataArray.append((char)(1 + ui->cboModeAxis->currentIndex()));
    sendCommand(0x01, dataArray);
    ui->pteStatus->appendPlainText("- Send: Home " + ui->cboModeAxis->currentText());
}

void MainWindow::on_btnStop_custom_clicked()
{
    QByteArray dataArray;
    dataArray.append((char)(1 + ui->cboModeAxis->currentIndex()));
    sendCommand(0x02, dataArray);
    ui->pteStatus->appendPlainText("- Send: Stop " + ui->cboModeAxis->currentText());
}

void MainWindow::on_btnManual_custom_clicked()
{
    QByteArray dataArray;
    dataArray.append((char)(1 + ui->cboModeAxis->currentIndex()));
    dataArray.append((char)0x00);
    sendCommand(0x04, dataArray);
    ui->pteStatus->appendPlainText("- Send: Manual " + ui->cboModeAxis->currentText());
}

void MainWindow::on_btnTracking_custom_clicked()
{
    QByteArray dataArray;
    dataArray.append((char)(1 + ui->cboModeAxis->currentIndex()));
    dataArray.append((char)0x01);
    sendCommand(0x04, dataArray);
    ui->pteStatus->appendPlainText("- Send: Tracking " + ui->cboModeAxis->currentText());
}

void MainWindow::on_btnPointing_custom_clicked()
{
    QByteArray dataArray;
    dataArray.append((char)(1 + ui->cboModeAxis->currentIndex()));
    dataArray.append((char)0x02);
    sendCommand(0x04, dataArray);
    ui->pteStatus->appendPlainText("- Send: Pointing " + ui->cboModeAxis->currentText());
}

void MainWindow::on_btnSetKp_custom_clicked()
{
    quint32 scaledValue = 0;

    if (ui->ledKp->text() == NULL)
    {
        QToolTip::showText(ui->ledKp->mapToGlobal(QPoint(3, -50)), "Enter value");
    }
    else
    {
        scaledValue = quint32 (ui->ledKp->text().toDouble() * 1000000);
        ui->pteStatus->appendPlainText("- Send: Kp " + ui->cboPIDAxis->currentText() +
                                       " " + ui->cboPIDName->currentText());
        qDebug() << scaledValue;
    }
}

void MainWindow::on_btnSetKi_custom_clicked()
{
    ui->pteStatus->appendPlainText("- Send: Ki " + ui->cboPIDAxis->currentText() +
                                   " " + ui->cboPIDName->currentText());
}

void MainWindow::on_btnSetKd_custom_clicked()
{
    ui->pteStatus->appendPlainText("- Send: Kd " + ui->cboPIDAxis->currentText() +
                                   " " + ui->cboPIDName->currentText());
}

void MainWindow::on_btnSetKff1_custom_clicked()
{
    ui->pteStatus->appendPlainText("- Send: Kff1 " + ui->cboPIDAxis->currentText() +
                                   " " + ui->cboPIDName->currentText());
}

void MainWindow::on_btnSetKff2_custom_clicked()
{
    ui->pteStatus->appendPlainText("- Send: Kff2 " + ui->cboPIDAxis->currentText() +
                                   " " + ui->cboPIDName->currentText());
}

void MainWindow::on_timerCOMPort_custom_timeout()
{
    listCOMPort.clear();

    /* Add new item */
    foreach (const QSerialPortInfo &info, QSerialPortInfo::availablePorts())
    {
        if (ui->cboCom->findText(info.portName()) == -1)
        {
            ui->cboCom->addItem(info.portName());
            ui->cboCom->setCurrentText(info.portName());
        }
        listCOMPort.append(info.portName());
    }

    /* Remove missing item */
    for (int i = 0; i < ui->cboCom->count(); i++)
    {
        if (listCOMPort.contains(ui->cboCom->itemText(i)) == false)
        {
            ui->cboCom->removeItem(i);
        }
    }
}

/* Private functions */
bool MainWindow::serialCOMPort_write(const QByteArray &data)
{
    if (serialCOMPort->isOpen() == true)
    {
        serialCOMPort->write(data);
        return true;
    }
    return false;
}

bool MainWindow::sendCommand(char msgID, const QByteArray &payload)
{
    QByteArray dataArray;
    quint16 checkSum = 0;

    /* Header */
    dataArray.append(QByteArray::fromRawData("\x47\x42\x02\x01\x00",5));

    /* Length */
    dataArray.append((char)(1 + payload.count() + 2));

    /* MsgID */
    dataArray.append(msgID);

    /* Payload */
    dataArray.append(payload);

    /* Check Sum */
    for (int i = 0; i < dataArray.count(); i++)
    {
        checkSum += static_cast<unsigned char>(dataArray.at(i));
    }
    checkSum = ~checkSum;
    dataArray.append((char)((checkSum >> 8) & 0x0ff));
    dataArray.append((char)(checkSum & 0x0ff));

    serialCOMPort_write(dataArray);
    return true;
}


